import "./chunk-LK32TJAX.js";

// node_modules/async-wait-until/dist/index.esm.js
var e = class _e extends Error {
  constructor(t2) {
    super(null != t2 ? `Timed out after waiting for ${t2} ms` : "Timed out"), Object.setPrototypeOf(this, _e.prototype);
  }
};
var t = (e2, t2) => new Promise((o2, n2) => {
  try {
    e2.schedule(o2, t2);
  } catch (e3) {
    n2(e3);
  }
});
var o = { schedule: (e2, t2) => {
  let o2;
  const n2 = (e3) => {
    null != e3 && clearTimeout(e3), o2 = void 0;
  };
  return o2 = setTimeout(() => {
    n2(o2), e2();
  }, t2), { cancel: () => n2(o2) };
} };
var n = 50;
var r = 5e3;
var c = Number.POSITIVE_INFINITY;
var l = (n2, r2, l2) => {
  var s, u;
  const i = null !== (s = "number" == typeof r2 ? r2 : null == r2 ? void 0 : r2.timeout) && void 0 !== s ? s : 5e3, a = null !== (u = "number" == typeof r2 ? l2 : null == r2 ? void 0 : r2.intervalBetweenAttempts) && void 0 !== u ? u : 50;
  let m = false;
  const d = () => new Promise((e2, r3) => {
    const c2 = () => {
      m || new Promise((e3, t2) => {
        try {
          e3(n2());
        } catch (e4) {
          t2(e4);
        }
      }).then((n3) => {
        n3 ? e2(n3) : t(o, a).then(c2).catch(r3);
      }).catch(r3);
    };
    c2();
  }), h = i !== c ? () => t(o, i).then(() => {
    throw m = true, new e(i);
  }) : void 0;
  return null != h ? Promise.race([d(), h()]) : d();
};
export {
  n as DEFAULT_INTERVAL_BETWEEN_ATTEMPTS_IN_MS,
  r as DEFAULT_TIMEOUT_IN_MS,
  e as TimeoutError,
  c as WAIT_FOREVER,
  l as default,
  l as waitUntil
};
//# sourceMappingURL=async-wait-until.js.map
